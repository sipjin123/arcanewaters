using UnityEngine;
using MapCreationTool.Serialization;
using System;

public class Spawn : MonoBehaviour, IMapEditorDataReceiver {
   #region Public Variables

   // Hardcoded spawn keys
   public static string STARTING_SPAWN = "Tutorial Town Start";

   // The key determining the type of spawn this is
   public string spawnKey;

   // The spawn id autogenerated in the map editor
   public int spawnId = 0;
   
   // Where the user is facing after spawning
   public Direction arriveFacing;

   // Convenient area key property
   public string AreaKey {
      get { return _areaKey; }
   }

   #endregion

   void Awake () {
      // Note the Area Type that we're in
      _areaKey = GetComponentInParent<Area>().areaKey;

      // If a spawn box was specified in the Editor, look it up now
      _spawnBox = GetComponent<BoxCollider2D>();
   }

   public Vector3 getSpawnPosition () {
      // Some spawn types specify a box that objects can spawn within
      return (_spawnBox == null) ? this.transform.position : Util.RandomPointInBounds(_spawnBox.bounds);
   }

   protected string getAreaKey () {
      return _areaKey;
   }

   public void receiveData (DataField[] dataFields) {
      foreach (DataField field in dataFields) {
         switch (field.k.ToLower()) {
            case DataField.PLACED_PREFAB_ID:
               string id = field.v.Trim(' ');
               spawnId = int.Parse(id);
               break;
            case DataField.WARP_ARRIVE_FACING_KEY:
               string rawData = field.v.Trim(' ');
               Direction parsedEnum = (Direction) Enum.Parse(typeof(Direction), rawData);
               arriveFacing = parsedEnum;
               break;
            case DataField.SPAWN_NAME_KEY:
               spawnKey = field.v.Trim(' ');
               break;
            case DataField.SPAWN_WIDTH_KEY:
               _spawnBox.size = new Vector2(field.floatValue, _spawnBox.size.y);
               break;
            case DataField.SPAWN_HEIGHT_KEY:
               _spawnBox.size = new Vector2(_spawnBox.size.x, field.floatValue);
               break;
         }
      }

      SpawnManager.self.registerMapSpawn(this);
   }

   #region Private Variables

   // The Area Key this spawn is in
   protected string _areaKey;

   // The area in which objects will be spawned, which can be optionally included in the scene
   protected BoxCollider2D _spawnBox;

   #endregion
}
